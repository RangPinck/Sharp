
 
Сокращения для быстрого кодинга
   CW - Console.WriteLine();
   i - i++;
 
ТИПИЧНЫЕ РЕШЕНИЯ
чтобы посмотреть какие поля (и их логику) имеет класс, необходимо написать его название, поставить на него курсор и нажать f12

массивы 

int[] Arr = new int[]{ 1,2,3,4,5};
при исользовании "using System.Linq" (так как методы лежат в нём)

MyArr.Length; - определение количества элементов массива
Arr.Max(); / Arr.Min(); - наибольший / наименьший элемент в массиве
Arr.Sum() - сумма элементов массива
Arr.Where(лямда выражение).действие(типа Max и т.п.) - условие в виде лямда выражения. пример: Arr.Where(i => i%2 == 0).Sum(); - нахождение нечётного числа
Arr.Where(лямда выражение).First(); - первый элемент удовлетворяющий условию (если элементов нет, то выхожит ошибка)
Arr.Where(лямда выражение).FirstOrDefault(); - первый элемент удовлетворяющий условию (если элементов нет, то выхожит дефолтное значение, например если тип данных int, то выйдет 0)

int [] res = Arr.Distinct().ToArray(); - копирование в новый массив (res, приписка ToArray()) уникальных значний (приписка Distinct()) старого массива (приписка Arr)
int [] res = Arr.OrderBy(i=>i).ToArray(); - копирование в новый массив (res, приписка ToArray()) отсортированных элементов старого массива (приписка Arr) в порядке возрастания (метод OrderBy(i => i)) (OrderByDescending(i=>i) - в порядке убывания)

Array.Sort(Arr); - сортировка элементов массива от меньшего к большему
Array.Find(Arr, i => i < 70); - возвращает элемент массива удовлетворяющего лямда выражению, начинает посик с начала до конца
Array.FindLast(Arr, i => i < 79); - возвращает элемент массива удовлетворяющего лямда выражению, начинает посик с конца до начала
int [] res =  Array.FindAll(Arr, i => i < 79); - возвращает все элементы указанного массива удовлетворяющие лямда выражению в виде массива
Array.FindIndex(Arr, i => i == 79); - возвращает значение индекса числа указанного в лямда выражении (в случаотсутвия необходимого значения в массиве вернёт "-1"), начинает посик с начала до конца
Array.FindLastIndex(Arr, i => i == 79); - возвращает значение индекса числа указанного в лямда выражении (в случаотсутвия необходимого значения в массиве вернёт "-1"), начинает посик с конца до начала
Array.Reverse (Arr); - переворот массива (элементы встают в обратном порядке)

Console.WriteLine(ulong.MaxValue);//вывод в консоль
            //целочисленные типы
1 байт
            byte b;//0 - 255
            sbyte sb; //(- 128) - 127
2 байта
            short s;//(- 32768) - 32767
            ushort us;// 0 - 65535
4 байта
            int i;//(-2147483648) - 2147483647
            uint ui;// 0 - 4294672295
8 байт
            long l; // (- 9223372036854775808) - 9223372036854775807
            ulong ul;// 0 - 18446744073709551615
            //вещественные
4 байта
            float f = 5.7f;
8 байт
            double d = 5.7;
            //символьные
2 байта
            char c = 'a';
            string str = "hi";
            //логический
            bool bl = true; 

            //арифметические операторы
            //+ - * /

Ввод:
a = double.Parse(Console.ReadLine());

конвертация данных
1.
  string str = "5";
            int a  = Convert.ToInt32(str);
            Console.WriteLine(a); 
2.
string str = "5";
            int a = int.Parse(str);
            Console.WriteLine(a*a);
3.
Данный метод "int.TryParse" помогет продолжить работу кода, даже если при конвертации произошла ошибка (посмотри на работу с ошибками ниже)
Лучше всего применять данный метод как булевое значение, чтобы выполнять какой-либо код при как0м-либо исходе           
string str = "5";

            int a;
            int.TryParse(str, out a);
Console.WriteLine(a*a);

Указание знака при использовании вещественных чисел
using System.Globalization;
  NumberFormatInfo numberFormatInfo = new NumberFormatInfo()
            {
                NumberDecimalSeparator = ".",
            };

Указание ошибок (Если правтльно помню, то как в  SQL)
 string str = "5";
   try 
            {
                int a = int.Parse(str);
                Console.WriteLine(a * a);
            }
            catch (Exception)
            {
                Console.WriteLine("ошибка");
            }


чтобы не закрывалась консольв винде нужно сделать ввод от пользваотеля (не обязательно какого либо значения).

приведение типов
int a;
double res = (double) a;


Среднее  арифметическое двух чисел (если вводятся только числа)
 double a, b;
            Console.WriteLine("Введите среднее арыфметическое 2х чисел\nВведите 2 числа\nПервое число: ");
            a = double.Parse(Console.ReadLine());
            Console.WriteLine("Введите второе число: ");
            b = double.Parse(Console.ReadLine());
            Console.WriteLine("Среднее арифметическое двух чисел: "+ ((a+b)/2));


Инкримент (++ = +1) и дикримент (-- = -1) : 
префикрсный (++а) - выполняется перед выполненеим всех операций

     int a = 0;
            Console.WriteLine(++a);

постфиксный (а++) - выполняется по порядку операций

     int a = 0;
            Console.WriteLine(a++);

Операции сравнения
==   равно
!= не равно
> больше 
< меньше
>= больше равно
<= меньше равно

Условия 
if (выражение) {действие 1;}
else {действие 2;}

логические операторы
! не
|   полное или
||  сокращённое или
&   полное и
&&  сокращённое и

пример логчиеского выражения:  int time = 10; bool step = time < 1; if (step == false) { Console.WriteLine("Всё работает"); }

проверка числа на чёность
Console.WriteLine("Введите число для проверки на чётность: ");
            int a;
            a = int.Parse(Console.ReadLine());
            if(a%2 == 0)
            {
                Console.WriteLine("Число чётное");
            }
            else
            {
                Console.WriteLine("Число нечётное");
            }

свич

 int a;
            a = int.Parse(Console.ReadLine());
            switch (a)
            {
                case 1: Console.WriteLine("Кейс 1");break;
                case 2: Console.WriteLine("Иди нахуй"); break;
                default: Console.WriteLine("Иди нахуй"); break;
            }

Циклы

While
while (условие){ тело }


Дз: количество чётных и нечётных чисел в диаразоне указанном пользователем
Console.WriteLine("Введите граничные числа:\nчисло 1 (наименьшее): ");
            int Start = int.Parse(Console.ReadLine());
            Console.WriteLine("число 2 (наибольшее): ");
            int End = int.Parse(Console.ReadLine());
            int Chet = 0, NeChet = 0;
            while (Start <= End)
            {
                if (Start % 2  == 0) { Chet++; };
                if (Start % 2 == 1) { NeChet++; };
                Start++;
     }
            Console.WriteLine("количество чётных чисел в даипазаоне: " + Chet);
            Console.WriteLine("количество нечётных чисел в даипазаоне: " + NeChet);

Do While

do {
тело;
} while (условие)

For

int num = 5;
            for (int i = 0; i < num; i++)
            {

            }
 особености цикла
1. бесконечный цикл
 for (; ; ) { Console.WriteLine("ты пидор"); }
2. обратный цикл
 int lim = int.Parse(Console.ReadLine());
            for (int i = 0; lim - 1 >= i; lim--)
            {
                Console.WriteLine(lim);
            }
3.

break - выход из условия или цикла
continue - пропуск итерации цикла

массивы 
вызов обного масива            
int[] MyArray = new int[5]; (выделение память под 5 элементов в оперативке)
очищать не надо, среда сама оищает мусор из памяти
массивы - ссылочный тип
пока нет ничего в массиве, элемент массива хранит значние NULL - отсутсвие ссыки на значение (дефолтное значение int - 0)
            MyArray.Length; - определение количества элементов массива
инициализация массива
            MyArray[0] = 1; - обращение к элементу массива
            int[] MyArray = new int[5] {1,2,3,4,5}; - с указанным колиеством элементов 
            int[] MyArray = new int[] {1,2,3,4,5}; - без указанаия количесва элементов
            int[] MyArr = Enumerable.Repeat(5, 10).ToArray(); - метод заполнения указанными значениями указаного количество элементов массива
            int[] MyArr = Enumerable.Range(4,5).ToArray(); - метод заполнения массива порядковым набором элементов (с указанного значения).
            Arr.Rank - возыращает серность массива (типо если двумерный возвращет 2)
            Arr.GetLength(i) - возвращает количество элементов в определённом измерении (например при первом измерении указываектся значнеие 0, при втором измерении 1 и т.д.)

вывод всех элементов массива
1.
int[] MyArray = new int[5] {1,2,3,4,5};
            for(int i = 0; i < MyArray.Length; i++)
            {
                Console.WriteLine(MyArray[i]);  
            } 

дз
Console.Write("введите количество элементов массива: ");
            int size = int.Parse(Console.ReadLine());
            int [] MyArray = new int[size];
            Console.WriteLine("Введите каждый элемент массива: ");
            for (int i = 0; i < size; i++)
            {
                Console.Write("Введите "+ (i+1) + "-й элемент массива: " );
                MyArray[i] = int.Parse(Console.ReadLine());
            }
            Console.WriteLine();
            Console.WriteLine();
                        Console.WriteLine("вывод массива в обратном порядке: ");
            for (int i = size -1; i >= 0; i--)
            {
                Console.WriteLine(MyArray[i]);
            }
            Console.WriteLine();
            Console.WriteLine();
            int summ = 0, min = MyArray[0];
            for (int i = 0; i < size; i++)
            {
                if(MyArray[i]% 2 == 0)
                {
                    summ += MyArray[i];
                }
                if(min > MyArray[i])
                {
                    min = MyArray[i];
                }
            }
            Console.Write("Сумма чётных чисел в массиве = " + summ);
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine("наименьшее число в массиве = "+ min);
            Console.WriteLine();
            Console.WriteLine();

индексы и диапазоны
добавлены в С#8 и реализованы в платформе dotNetCore, а не под DotNetFrameWork
DotNetCore - кроссплатформенный

int[] Arr = new int[] { 1, 2, 3,4,5,6};

диапазон

Console.WriteLine(Arr[Arr.Length -1]); - вариант получения послежнего элементамассива, когда его длинна не известна
Console.WriteLine(Arr[^1]);- вариант получения послежнего элемента массива, когда его длинна не известна
int[] Arr = new int[] { 1, 2, 3,4,5,6, 1312};
int[] res = Arr[1..4]; - извлечение из первого массива элементов с индексами 1,2,3 (с 1 до 4 не включительно)
int[] res = Arr[..4]; - извлечение из первого массива элементов с индексами 0, 1,2,3 (с 0 до 4 не включительно)
int[] res = Arr[2..]; извлечение из первого массива элементов с индексами 2,3... (с 2 до последнего включительно)

ИНДЕКС

индекс - структура 
 Index myind = ^1; - прпимер индекса последнего элемента массива

может принимать какое-то знаение, указывающее на номер элемента того же массива

 myind.Value.. - принимает или возвращает значние индекса указанного массива (номер)
 myind.IsFromEnd - принимает или возвращает значние (ведно/неверно) о начале отсчёта (начало (без всего)/конец (с имользоавнием "^"))

пример создания постоянного индекса
            Index myind = new Index(3, true);

RANGE

            Range myRan = 1..4; -  с начала
            Range myRan = ^4..^1; - конца

просто ограничение в элементах, созданное из индексов (принимает в себя 2 индекса)
Range myRan = new Range(1,4); (то же самое что и  Range myRan = 1..4;)

многомерные массивы
примоугольные и ступенчатые
двумерный прямоугольный массив
int[,] Arr - пример создания двумерного массива (всё зависит от количества запятых)
выделение памяти под массив на 3 строки и 5 колонок
            int[,] Arr = new int[3,5];
обращение к элементу массива: Arr[строка, колонка]
инициализация:
1. int[,] Arr = new int[3, 5] {
            {1,2,3,4,5},
            {1,2,3,4,5},
            {1,2,3,4,5}
            };

2. Arr[1, 2] = 5;



Вывод:
1. 
foreach - вывод просто элементов, неважно в каком виде
foreach (int i in Arr)
            {
                Console.Write(i);
            }
2. С помощью 2х for
for (int i = 0; i < Arr.GetLength(0); i++)
            {

                for (int j = 0; j < Arr.GetLength(1); j++)
                {
                    Console.Write(Arr[i, j]);
                }
                Console.WriteLine();
            }
рандом в c#:
Random random = new Random();   - создание объекта генерирующего случайные числа
Arr[i, j] = random.Next(100); - присваивание элементу рандомного значнеия

ступенчатые (зубчатые) массивы - в строках разное количество элементов - одномерный массив одномерных (возможно разных) массивов
обьявление:     int[][] Arr = new int [3][];
это одномерный массив
в первом измерении храниться ссылка (или в дефолте NULL)
для каждого его элемента нужно выделять оператиную память (как в CИ)
 int[][] Arr = new int [3][];
Arr[0] = new int [3];
Arr[1] = new int [5];
Arr[2] = new int [10];
для обрашения каждый индекс указывается в отдельных []
 Arr[0][1] = 55;           
Console.WriteLine(Arr[0][1]);
да и в принципе образение происходит средне между двумерными и обычеыми массивами
заполнение с помощью цикла for
int[][] Arr = new int [3][];
            Arr[0] = new int [3];   
            Arr[1] = new int [5]; 
            Arr[2] = new int [2];

            Random rand  = new Random();

            for (int i = 0; i < Arr.Length; i++)
            {
                for (int j = 0; j < Arr[i].Length; j++)
                {
                    Arr[i][j] = rand.Next(50);
                }
            }

            for (int i = 0; i < Arr.Length; i++)
            {
                for (int j = 0; j < Arr[i].Length; j++)
                {
                    Console.Write(Arr[i][j] + "\t"); 

                }
                Console.WriteLine();
            }

Трёхмерные и более массивы (прямоугольные и зубчатые):



СТРОКИ
пример вывода:
int x = 10, y = 5;
1.	Console.WriteLine( $"x + y = {x+ y}");
2.	Console.WriteLine( "x + y = {0}", x + y);
3.	Console.WriteLine( "x + y = "+ (x + y));
чтобы узнать длинну строки (как и длинну массива): 
string str = "привет мир!";
            Console.WriteLine(str.Length);
опирации над строкой:
1. конкатенация
а.	string str1 = "привет";
            string str2 = " мир!";
            string str = str1 + str2;
            Console.WriteLine(str);

int age = 20;
            string q = "вам " + age + " лет";
            Console.WriteLine(q);

2. Перевод в строку других типо данных:             string q2 = age.ToString();

3. поиск подстроки (части строки): Console.WriteLine(название_строки.Substring(начальный индекс,количество_вытаскиваемых индексов));
  int age = 20;
            string q = "вам " + age + " лет";
            Console.WriteLine(q.Substring(4,2));
4. поиск индекса указанного элемента: Console.WriteLine(название_строки.IndexOf("[элемент строки]"));
5. перевод всей строки в нижний регистр:             Console.WriteLine(q.ToLower());
6. вставка в строку подстроку (можно так же использовать для вывода): sring qqq = $"Вам {age}!"; или string qqq = string.Format("Вам {0}!", age);(можно перечислять элементы как в Си)
7. Указание на пустую строку: название.Empty (применяется для указания на пустую строку, т.к. без этого будеь вылетать ошибка об отсутсвии данных)
логически поток программы: 
bool- логический тип 
операторы сравнения
            Console.WriteLine($"5 < 7   {5 < 7}"); = 5 < 7   True

функции и методы - это одно и тоже
ни одна функция не может существовать без класса
как оформлять:
модификатор тив_возвращаемого_значения название_метода (параметры) {
    тело метода
} 
(в общем, пока всё как в СИ)
return ... - возвращаемое значение

 static int SUM (int a, int b)
        {
          
            return a + b;
        }
        static void Main(string[] args)
        {
            
            Console.WriteLine(SUM(7, 5));
        }

медод не обязан возвращать какие-то данные

 //найти индекс введёного элемента в числовом массиве


        static int Index_in_Array(int[] Arr, int element)
        {
            for (int i = 0; i < Arr.Length; i++)
            {
                if (Arr[i] == element) return i;
            }
            return -1;
        }
        static void Coll(int index)
        {
            if (index > -1) System.Console.WriteLine("индекс элемента в массиве = " + (index + 1));
            else
                System.Console.WriteLine("В массиве нет указаного элемента");
        }
        static void Main(string[] args)
        {
            int[] Arr = new int[10];
            Random random = new Random();
            for (int i = 0; i < Arr.Length; i++)
            {
                Arr[i] = random.Next(10);
                System.Console.Write(Arr[i] + " ");

            }
            System.Console.WriteLine();
            Console.Write("Введите элемент: ");
            int index = int.Parse(Console.ReadLine());
            Coll(Index_in_Array(Arr, index));
        }

        ПЕРЕГРУЗКА МЕТОДОВ
это несколько вариаций метода с однима названием, но принимающим разные параметры, т.е. всё зависит от передаваемых параметров и их количества (см пример ниже)
         static int Sum (int a, int b){
            return a + b;
        }
        static int Sum (int a, int b, int c){
            return a + b + c;
        }

        ФИЩКА
        для описания метода (его названия и принимаемых параметров) надо поставить над ним /// (пример ниже)
        /// <summary>
        /// сумма 2х чисел
        /// </summary>
        /// <param name="a"></param> - первое слагаемое
        /// <param name="b"></param> - второе слагаемое
        /// <returns></returns>
        static int Sum (int a, int b){
            return a + b;
        }

Область видимости - как в СИ
конфликты областей видимости - в зависисых областях вилдимости у переменной с одним именем разные типы данных

ССЫЛОЧНЫЕ И ЗАНИЧИМЫЕ ТИПЫ

СТЕК (STACK) - не большой объём оперативной памяти, которая выделяется для каждого потока, т.е. для хранения переменных и выполнения операций (около 1 мб)
выполняет логику программы
Можно быстро оперировать с данными
определяется очерёдность вызова методов, т.е. логика программы
работает по типу last in - first out -последние вошедщие данные достаются первыми 

HEAP - "управляеммая куча оперативной памяти" - склад оперативной памяти для работы программы, и её гораздо больше чем stack.
память выделяется подконтрольно (её надо выделять самому), но всё зависит от ОС и зарактеристик ПК (для ОС 32 бита - 1,5 Гб, для 64 бит - до 8 Тб)
Но с ним трудно управляться 
stack - мало пямяти, но быстро, heap - много, но медленно

ЗНАЧНИМЫЙ ТИП - VALUE TYPE - размещается в стеке - структуры и энамы - перкращают своеё существование пока выполняется код в их области видимости

ССЫЛОЧНЫЙ ТИП - REFERENCE TYPE - размещается в HEAPе - классы 

в стеке храниться ссылка на элемент в HEAPе

что такое NULL
его можно использовать только с ссылочными типами
если стоит это значение то данных, получаемых по ссылке нет: либо их нет, либо канал по которому они поступают недоступен

оператор null-объединения ??


даёт возмодность установить дефолтное значение для ссылочных типов
он орагнизуется по типу if/else, но для получения значения null
пример реализации: 
        string str = null;
        System.Console.WriteLine(str ?? "Error having data");
как понимать:
        string str = null;
        if (str == null){
            System.Console.WriteLine("Error having data");
        }
        else {
            System.Console.WriteLine(str);
        }

оператор присваивания объединения со значнием null ??=
 он похож на ?? ,но в данном случае указываемое значение присваивается (типо условия, если NULL, то равно тому то)
        string str = null;
        System.Console.WriteLine(str ??= "Error having data");
        System.Console.WriteLine();
        System.Console.WriteLine(str);
        
        (чтобы вспомнить посмотри на результат программы)

оператор условного null  ?. - просто проверка на null, в случае неудачи которой дальнейший код не будет выполнен (для примера поменяй данные массива в методе GetArray())

static int[] GetArray(){
        int[] myArray = null;
        return myArray;
    }
       static void Main(string[] args){
     int [] Arr = GetArray();
     System.Console.WriteLine($"Сумма элементов массива {Arr?.Sum()}");
       }

пример вариации использования нескольких оперантов:

        static int [] GetArr(){
            int [] myArray = null;
            return myArray;
        }

       static void Main(string[] args){
        int [] array = GetArr();
        System.Console.WriteLine($"количество элементов массива {array?.Length ?? 0}");
       }


Ключевое слово REF - ccылка на переменную, передаваемую в параметры метода (посмотри где оно стоит), 
таким образом значитмый тип можно преобразовать в ссылочный, для передачи и измениения 

пример
static void Foo(ref int a){
    a  = -5;
}

 static void Main(string[] args){
     int a = 2;
     Foo(ref a);
     System.Console.WriteLine(a);
 }

ссылочные локальные переменные

так же как и с передаваемыми значнеиями  оператор ref может использоваться для создания локальных ссылочных переменных
если в такие переменные передавать по ссылке значения, то исходная переменная (от которой идёт ссылка) тоже будет изменена вместе с указателем
(скорее всего это просто как указатели и ссылки в с++)

пример реализации:

 static void Main(string[] args){
        int [] arr = {1, 2, 3};
        ref int b = ref arr[0];
         b  = -5;
        
       }

в данном случае 1 элеинт массива изменится на -5 
так же можно и возвращать значения из методов, типо return ref [ссылочный_объект] в методе и в маине: ref int b = ref [метод];

Ключевое слово OUT - оно работает как и ключевое слово REF, те мы значение передаём по ссылке. 
они (ref и out) работаю почти одинакого, но разница в том, что ключевое слово ref позволяет изменять значение на протяжении всего кода,
но выбор, присваивать значение или нет за нами, 
а в случае с out - обязательно присвоить значение в вызваемом методе.

посмотри как меняется и какую ошитбку выдаёт, если убрать строчку присвоения в методе foo:

 static int foo (out int val){
            val = -1;
            return val;
        }
        static void Main()
        {
            int a  = 5;
            System.Console.WriteLine(foo(out a));
        }

обычно просто объявляют переменную и вызывают с ней метод OUT,
поэтому с SCH версии 6.0 и выше можно записать так: foo(out int a) - передают только что объявленную переменную
с методом REF так сделать нельзя

так же OUT  используется с методом TryParse, который преобразовывает полученную строку в о что-то (какой-то тип данных);
int.TryParse(str, out a);

ключевое слово In

оно доступно с версии 7.2 SCH
Оно позволяет передать параметр метода по ссылке, но в отличие от REF и OUT, переданное значение изенить нельзя
такое надо для того, чтобы получаемые параметры не копировались, а просто передавлись по ссылке (для оптимизации кода), 
при условии что данные не будут изменяться 

PARAMS

при написании функции можно не создавать её перегзку, а просто передать массив одинковых значений с помощью метода params [новый массив значений], котой будет использоваться в коде
при этом в одном методе не может 2 таких модификаторов и отдельные значения указыва передаваемые в функцию, указываются перед этим модификатором
пример:

static int Sum(params int[] arrNumbers)
    {
        int number = 0;

        for (int i = 0; i < arrNumbers.Length; i++)
        {
            number += arrNumbers[i];
        }

        return number;
    }
    static void Main(string[] args)
    {
        System.Console.WriteLine(Sum(0,1,2,3,4,5));
    }

ПАРАМЕТРЫ ПО УМОЛЧАНИЮ 
просто указываются в параметрах для передаи в функцию по примеру: тип название_параметра = значение
и они должны быть в конце списка


ИМЕНОВАННЫЕ ПАРАМЕТЫ/элементы
это передавча параметров в любом порядке с указанием названия переменной в которцю они передаются
пример 
функция static int foo(int a, int b)


вызов функции  foo(b:5, a:2+)

РЕКУРСИЯ И ПЕРЕПОЛНЕНИЕ СТЕКА

